TaskHandle_t Task1;
TaskHandle_t Task2;
#include <ArduinoJson.h>
#include <WiFi.h>
#include <PubSubClient.h>
// LED pins
const int led1 = 2;
const int led2 = 4;



const char* ssid = "@@@@@@@@";
const char* password =  "@@@@@@@@@";
const char* mqttServer = "example.AWSAMEZON.io";
const int mqttPort = 1998;

WiFiClient espClient;
PubSubClient client(espClient);
void setup() {
  Serial.begin(115200); 
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  //create a task that will be executed in the Task2code() function, with priority 1 and executed on core 1
  xTaskCreatePinnedToCore(
                    Task2code,   /* Task function. */
                    "Task2",     /* name of task. */
                    10000,       /* Stack size of task */
                    NULL,        /* parameter of the task */
                    1,           /* priority of the task */
                    &Task2,      /* Task handle to keep track of created task */
                    1);        /* pin task to core 1 */
    delay(500); 

  //create a task that will be executed in the Task1code() function, with priority 1 and executed on core 0
  xTaskCreatePinnedToCore(
                    Task1code,   /* Task function. */
                    "Task1",     /* name of task. */
                    10000,       /* Stack size of task */
                    NULL,        /* parameter of the task */
                    1,           /* priority of the task */
                    &Task1,      /* Task handle to keep track of created task */
                    0);          /* pin task to core 0 */                  
  delay(500); 

 
}
//Task2code: blinks an LED every 700 ms
void Task2code( void * pvParameters ){
  Serial.print("Task2 running on core ");
  Serial.println(xPortGetCoreID());
WIFI();
  for(;;){
    Serial.print("Task2 running on core ");
    Serial.println(xPortGetCoreID());
     if (WiFi.status() != WL_CONNECTED) {
    WIFI();
  }
    delay(500);
   Serial.println("LED 2 ON");
   digitalWrite(led2, HIGH);
   delay(700);
   Serial.println("LED 2 OFF");
    digitalWrite(led2, LOW);
    delay(700);
  }
}



//Task1code: blinks an LED every 1000 ms
void Task1code( void * pvParameters ){
  Serial.print("Task1 running on core ");
  Serial.println(xPortGetCoreID());
 
  for(;;){
    Serial.print("Task1 running on core ");
    Serial.println(xPortGetCoreID());
   
    MQTT();
    Serial.println("LED 1 ON");
    digitalWrite(led1, HIGH);
   delay(1000);
    Serial.println("LED 1 OFF");
    digitalWrite(led1, LOW);
    delay(1000);
  } 
}


void loop() {

 
  
}


void WIFI(){
  
 WiFi.begin(ssid, password);
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Connecting to WiFi..");
  }
 
  Serial.println("Connected to the WiFi network");
 
  client.setServer(mqttServer, mqttPort);
 
  while (!client.connected()) {
    Serial.println("Connecting to MQTT...");
 
    if (client.connect("ESP32Client")) {
 
      Serial.println("connected");
 
    } else {
 
      Serial.print("failed with state ");
      Serial.print(client.state());
      delay(2000);
 
    }
  }  
}

void MQTT(){
  StaticJsonBuffer<300> JSONbuffer;
  JsonObject& JSONencoder = JSONbuffer.createObject();
 
  JSONencoder["Modual"] = "ESP32";
  JSONencoder["sensor"] = "GAS";
  JsonArray& values = JSONencoder.createNestedArray("values");
 
  values.add(80);
  values.add(21);
  values.add(33);
 
  char JSONmessageBuffer[100];
  JSONencoder.printTo(JSONmessageBuffer, sizeof(JSONmessageBuffer));
  Serial.println("Sending message to MQTT topic..");
  Serial.println(JSONmessageBuffer);
 
  if (client.publish("esp/test", JSONmessageBuffer) == true) {
    
    Serial.println("Success sending message");
  } else {
    Serial.println("Error sending message");
  }
 
  client.loop();
  Serial.println("-------------");
 
  delay(500);
}
